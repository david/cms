# .goosehints

This file contains guidelines for Goose to follow when working on this project.

## Guiding Principles

- **Write Minimal, Correct Code**: Write the least amount of code that fulfills the requirements. The code should be easy to read, understand, and maintainâ€”in other words, obviously correct.
- **"Let It Crash"**: Avoid defensive coding. Trust Elixir's built-in error handling and supervision trees.
- **Minimize Churn**: Avoid unnecessary changes, such as renaming or cosmetic refactoring, to keep code reviews focused.
- **One Task at a Time**: Separate refactoring from functional changes. If a refactoring is necessary, do it first, get it reviewed, and then implement the functional change.
- **Trust the Compiler**: Address all compiler warnings and errors. Remove unused aliases, as the compiler correctly identifies them.
- **Use UI Components Correctly**: Use UI components for their intended purpose. For example, use menus for navigation, not for displaying simple lists.

## Project Investigation

- **Be Autonomous**: Proactively investigate the project to answer your own questions. Do not ask for information you can find yourself.
- **Primary Tool: `tidewave`**: Use the `tidewave` tool as your main method for inspecting the codebase, such as checking for modules and functions.
- **Secondary Tool: `developer`**: When `tidewave` is not sufficient, use the `developer` tool to inspect files directly.
- **Database Schema**: To understand the database structure, consult `priv/repo/structure.sql`.
- **Routes**: To find the controller or view for a specific route, use `mix phx.routes`.
- **Project Structure**: This is a standard Elixir/Phoenix project. Business logic is in `lib/cms`, and web logic is in `lib/cms_web`.
- **Scoped Content**: All content is scoped to an organization and sometimes a user. In LiveViews, access the scope via `socket.assigns.current_scope`.
- **Test Fixtures**: Fixtures are in `test/support/fixtures/` and are named `CMS.ModuleNameFixtures`.

## Development Workflow

### Coding

- **Error Handling**: Use `with` statements for complex success paths and `case` statements for simple, explicit pattern matching on tagged tuples (e.g., `{:ok, result}`, `{:error, reason}`).
- **Tool Paths**: Always use absolute paths with the `developer.text_editor` tool.

### Database Migrations

- **Create Migrations**: Use `mix ecto.gen.migration <migration_name>` to create new migration files.
- **Apply Migrations**: Run `mix ecto.migrate` to apply pending migrations.
- **Rollback Migrations**: Use `mix ecto.rollback` to revert the last applied migration if necessary.

### Testing

- **Test Production Code**: Always write tests for new code. If you modify existing code that lacks tests, mention it and ask for guidance.
- **Test at the Right Layer**: Test business logic in context tests and UI logic in UI tests.
- **Simplify Test Setup**:
    - Use existing fixtures like `user_fixture/0` to implicitly handle default context (e.g., organization).
    - Do not create more test data than necessary.
    - Do not use nested `describe` blocks.

### Finalizing Changes

1.  **Test**: Run `mix test` after making changes to catch errors early.
2.  **Format**: Run `mix format` before finishing to ensure code conforms to style guidelines.

## Communication

- **Be Concise**: Omit pleasantries and unnecessary chatter.
- **Don't Echo Code**: Do not repeat the code you've generated in your response. The user will review it through other means.
- **High-Level Plans**: Keep plans concise and high-level. Do not include implementation details like function bodies or HTML.
- **Include Tests in Plans**: Always list the tests you plan to write.

### Code Commenting

- **Explain "Why," Not "What"**: Only add comments to explain non-obvious code or complex business logic.
- **No Redundant Comments**: Do not add comments that restate the code.
- **No Task-Specific Notes**: Do not leave notes to yourself in the code.

# vim: ft=markdown
