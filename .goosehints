# .goosehints

## Project Overview

- **Type:** Elixir/Phoenix Web Application
- **Location:** This file resides in the project root directory. Run commands from here.
- **Note:** This project uses git worktrees; the specific root directory path might vary (e.g., `/var/home/david/Boxes/chr/some-branch`).

## Development Guidelines

- **Planning & Execution Cycle:**
  - **1. Propose Plan:** Outline the overall strategy. This **must include a list of all files to be created or modified.** For file modifications, present changes in a **unified diff format** (approx. 3 lines context), ideally with removals in red, additions in green, and context in gray (actual color rendering depends on the terminal). For new files, describe their purpose and structure. Detail any commands to be run.
  - **2. Seek Single Approval for Plan:** Wait for explicit approval of the entire proposed plan (all file changes, new file descriptions, commands).
  - **3. Execute Approved Plan:** Once the plan is approved, proceed with all specified file creations/modifications and non-destructive commands. Write file content directly without re-displaying it, unless a very small modification (1-2 lines) is clearer shown in full.
  - **4. Summarize & Confirm Completion:** After all operations are complete, **list all files that were actually written/modified.** Then, ask for final approval/confirmation of the completed work.
  - **Critical Actions:** Still seek separate confirmation before executing potentially destructive commands (e.g., running migrations if not part of the explicitly approved plan details) or if significant deviations from the approved plan become necessary.
- **CRITICAL - NO CODE COMMENTS:** **ABSOLUTELY NO comments** of any kind (Elixir `#`, Heex `<%#`, HTML `<!--`, etc.) should be added to generated or modified code. Rely *only* on self-explanatory code and context. This is a strict requirement.
- **Commit Messages:** **Do not use prefixes** like `feat:`, `chore:`, `fix:`, etc. Use clear, descriptive messages.
- **`get_in` Syntax:** Prefer `get_in(record.property.other)` over `get_in(record, [:property, :other])` for accessing nested data.
- **Safe Navigation:** Prefer `get_in(data.a.b)` over `data.a && data.a.b` for safely accessing potentially nil nested map/struct data. Avoid manual short-circuit checks.
- **Context Boundaries:** **Strictly keep Ecto Repo interactions within context modules.** Do not call `Repo` functions directly from controllers, LiveViews, components, **schema modules**, or other non-context modules. Contexts should provide the sole interface for database operations.

## Key Directories & Files (relative to project root)

- `mix.exs`: Project definition, dependencies. **Check this to see available libraries/APIs.**
- `mix.lock`: Exact dependency versions.
- `lib/`: Core application code (Elixir).
  - `lib/your_app_web/components/`: Often contains reusable UI components (`*_components.ex`) for Eex/Heex templates. (Verify exact path based on app name).
- `test/`: Tests (ExUnit).
- `config/`: Configurations.
- `priv/`: Static files, migrations, templates.
- `assets/`: Frontend assets.

## Common Commands (run from project root)

- `mix setup`: Install deps, setup DB, run migrations.
- `mix phx.server`: Start dev server.
- `mix test`: Run tests.
- `mix format`: Format code.
- `mix deps.get`: Fetch dependencies.
- `mix phx.routes`: List routes.
- `mix ecto.migrate`: Run DB migrations.
- `iex -S mix`: Start interactive console.

## Tools

- **Build:** Mix
- **Framework:** Phoenix
- **Database:** Ecto (check `config/`)
- **Testing:** ExUnit
- **UI Components:** Defined in `*_components.ex` modules (often in `lib/your_app_web/components/`).
