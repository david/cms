# .goosehints

**LLM Instructions: Adhere strictly to these guidelines.**

## I. Foundational Principles

1.  **CRITICAL - NO CODE COMMENTS:**
    *   **OMIT ALL CODE COMMENTS.** Rely on self-explanatory code and descriptive commit messages for rationale.
    *   This is inviolable, especially for HEEx (no `#` or other comment types).

2.  **Task Adherence & Scope:**
    *   Implement *only* the explicit request.
    *   Assess and implement direct consequences (callers, dependencies).
    *   NO UNSOLICITED CHANGES/REFACTORS. Propose deviations separately; implement only upon approval.

3.  **Proactive Project Understanding & Verification (CRITICAL):**
    *   **DO NOT ASSUME. VERIFY FIRST.** **Prioritize `tidewave` tools** for Elixir/Phoenix introspection. Fallback to general tools (`rg`, `developer__text_editor command="view"`) for broader discovery or where `tidewave` is not suited.
        *   Modules, functions, docs: `tidewave__get_source_location`, `tidewave__package_docs_search`
        *   Ecto schemas, DB queries, constraints: `tidewave__get_ecto_schemas`, `tidewave__execute_sql_query`, or inspect ./priv/repo/structure.sql.
        *   Logs, errors, stacktraces: `tidewave__get_logs`.
        *   LiveViews, process state: `tidewave__list_liveview_pages`, `tidewave__get_process_info`.
        *   Other (app names, paths, data structures, `conn`/`socket`, etc.): `tidewave` if applicable, else general tools.
        *   Shared component props/slots: `tidewave__get_source_location` for defs if possible, `rg` for call sites.

4.  **Function Signature Changes & Call Site Management (CRITICAL):**
    *   If a function's signature changes, **update ALL call sites** as part of the same task.

## II. Workflow & Code Quality

1.  **Core Workflow:**
    *   Implement directly. Create/modify files.
    *   Run `mix compile` frequently after significant changes.
    *   Run `mix format` as the *final step* after all other operations.

2.  **Accuracy:**
    *   Visually re-verify critical strings (URLs, routes) transcribed from tool output. Treat as literals.

3.  **Commit Messages:**
    *   No prefixes (e.g., `feat:`, `fix:`). Use clear, descriptive messages.

## III. Elixir/Phoenix Development

1.  **Context Boundaries:**
    *   **Strictly keep Ecto Repo interactions within context modules.** No `Repo` calls from controllers, LiveViews, components, schemas (exception: `unsafe_validate_unique/3` in changesets if truly necessary and alternatives are much more complex).

2.  **Ecto & Database:**
    *   **Schema Design:** Adapt existing schemas; avoid redundancy.
    *   **Changeset Creation:** Use `YourSchema.changeset(%YourSchema{}, attributes_map \\ %{})`.
    *   **Query Optimization:** Avoid N+1. Prefer batch operations.
    *   **Ecto Function Behavior:** Understand robustness (e.g., `Repo.insert_all/3` with empty lists). Avoid redundant guards.
    *   **Migrations (Initial Dev):** Before stabilization/deploy, consider rolling back and modifying the original migration rather than many small alterations.
    *   **Migrations & Existing Data:** When adding a non-nullable column to a table with data, **ASK THE USER** for the strategy. Do not assume.
    *   **Ecto Schema vs. Migration Types:** Distinguish Elixir types in schemas (e.g., `:string`) from DB/migration types (e.g., `:text`).
    *   **Ecto Query Defaults:** Omit `select: f` if `from f in Family` (implied).

3.  **Coding Style & Best Practices:**
    *   **Data Pipelines:** Strongly favor. Functions for side-effects should return input. Avoid intermediate variables.
    *   **Safe Nested Access:** Prefer `get_in(data.property.other)`.
    *   **Collections:** `Stream` for multi-step processing, `Enum.map` for simple single maps.
    *   **Logic Simplification:** Trust guarantees (DB constraints, auth). "Let it crash" for invariants. Question boilerplate (e.g., `handle_params/3` if a no-op).
    *   **Naming:** Clear, concise, intention-revealing. **No unsolicited renames.**
    *   **HEEx/EEx Conditional Rendering:**
        *   Single element/component: `<.icon :if={@show_icon} />`.
        *   Blocks/logic/else: `<%= if ... %> ... <% else %> ... <% end %>`.
        *   HEEx inline `{if}`: For simple Elixir values (strings, numbers), not components.
        *   Encapsulate complex conditionals in Function Components.
    *   **Assertive Pre-condition Validations (Contexts):** Use direct Elixir patterns before DB mutations (e.g., `%Family{} = Repo.get_by!(...)`). `MatchError` or `Ecto.NoResultsError` are appropriate for violations.
    *   **Function Component Invocation:** Call aliased components directly: `<.component_name />`.

4.  **HEEx/Templating Specifics:**
    *   **Semantic HTML:** Prefer `<dialog>`, `<nav>` over `<div>`s.
    *   **UI Framework Integration (DaisyUI, Tailwind):**
        *   Consult framework docs for structure, classes, JS.
        *   Simplify structure; avoid extra wrappers.
        *   Respect framework styling; avoid conflicting custom styles (e.g., padding).
        *   Verify CSS class names are correct and complete.
    *   **JavaScript Hooks (`phx-hook`):** Only use if the JS hook is defined (e.g., in `assets/js/app.js`).

5.  **LiveView JS Commands:**
    *   **Correct Invocation:** Follow docs (chaining, event propagation `JS.exec("event.stopPropagation()")`).
    *   **Aliasing:** Ensure `alias Phoenix.LiveView.JS` if using `JS` commands directly.

## IV. Goose Operational Guidelines

1.  **Absolute Paths:** ALWAYS use absolute paths for developer extension tools.
    *   `tidewave` operates within a Docker container where its root is `/app/`. Paths from `tidewave` (e.g., `get_source_location`) will be prefixed with `/app/`. Strip this prefix and join the remainder with the host's project root path for `developer` tool file operations.

2.  **Tool Input Generation:**
    *   **Syntax Error Recovery / Difficult `str_replace`:** If `tidewave__project_eval(code: "Mix.Tasks.Compile.run([])")` / `tidewave__project_eval(code: "Mix.Tasks.Format.run([])")` fails *repeatedly* from a `write`, or `str_replace` is problematic (exact matches), switch to: "view file, perform global string replacement in memory, then write corrected file."
    *   **Verify `old_str` for `str_replace` Meticulously:** If `str_replace` fails, *immediately* re-`view` the file to copy the *exact* `old_str` (whitespace, line breaks, special chars) before retrying.
    *   **Distinguish Tool Escaping vs. File Syntax:**
        *   **Tool Args (e.g., `file_text`):** Escape per LLM tool use guidelines (e.g., `'''` to `\'\'\'`).
        *   **File Content (e.g., Elixir code):** Adhere *strictly* to target language syntax. No unnecessary escapes.

3.  **Communication & Interaction (CRITICAL - Minimal Protocol):**
    *   **NO UNSOLICITED:** Plans, execution narratives, summaries. User uses `git status/diff`.
    *   **Direct & Factual:** Omit pleasantries, emotional expressions.
    *   **Essential Updates Only:** Proceed to tool use or next logical output.
    *   **Adapt to User Feedback:** Pay close attention to corrections/preferences. Remember and apply.

## V. Project Context Reference

*   **Type:** Elixir/Phoenix Web App.
*   **Location:** Project root. Run commands from root. Git worktrees may vary root path.
*   **Key Files/Dirs (relative to root):**
    *   `mix.exs`: Project defs, deps. **Check for APIs.**
    *   `lib/cms/`: Core Elixir logic.
    *   `lib/cms_web/`: Phoenix interface (LiveViews, components in `lib/cms_web/components/`).
